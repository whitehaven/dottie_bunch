[user]
  email = accrist@gmail.com
  name = Alex Crist

[core]
  excludesfile = $HOME/.gitignore_global

[alias]
  # list all aliases
  la  = "!git config -l | grep alias | cut -c 7-"
  # from https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298 - visualizing git graphs
  lg  = !"git lg1"
  lg1 = !"git lg1-specific --all"
  lg2 = !"git lg2-specific --all"
  lg3 = !"git lg3-specific --all"

  lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
  lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

  # more nice formats
  l  = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat --date=short

  # gets commits and diffs for a specified tree or blob
  filelog = log -u
  fl      = log -u

  a   = add
  ap  = add -p

  c   = commit --verbose
  ca  = commit -a --verbose
  cm  = commit -m
  cam = commit -a -m
  m   = commit --amend --verbose

  d   = diff
  ds  = diff --stat
  dc  = diff --cached
  dw  = diff --word-diff

  s   = status
  ss  = status -s
  co  = checkout
  cob = checkout -b
    # list branches sorted by last modified
  b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

  # From https://gist.github.com/mwhite/6887990, each alias preceded by its author's comments:

  # git init
  # git rao https://url-here.git
  # git ac "Message"
  # git pushitgood
  rao               = remote add origin
  ac                = !git add . && git commit -am
  push-set-upstream = push -u origin
  push-all          = push -u origin --all
  push-dominate     = push -u origin --all --force

  # branch delete: This checks out your local master branch and deletes all local branches
  #                that have already been merged to master
  brd = !sh -c \"git checkout master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d\"

  # branch delete here: Deletes all local branches that have already been merged to the branch
  #                     that you're currently on
  brdhere = !sh -c \"git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d\"

  # diff status: A git diff, but with only the filenames (which reminds me of git status)
  diffst = diff --name-only

  # forced pull: You have a local branch (e.g. for reviewing), but someone else did a forced push
  #              update on the remote branch. A regular git pull will fail, but this will just set
  #              the local branch to match the remote branch. BEWARE: this will overwrite any local
  #              commits you have made on this branch that haven't been pushed.
  pullf = !sh -c \"git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)\"

  # quick amend: Amend my staged changes to the last commit, keeping the same commit message
  amend = commit --amend -C HEAD

  # history: This is pretty much the only way I look at my log. Aside from providing one-line logs,
  #          it also shows the branching in/out
  hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

  # This one is also usefule to run merge test before merge to check for any conflicts.
  mergetest = "!f(){ git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; };f "

  # simple but really efficient to minimize the size of a diff. It uses color to inline the differences.
  wdiff = diff --word-diff

[diff]
  tool = vimdiff

[difftool]
  prompt = false
